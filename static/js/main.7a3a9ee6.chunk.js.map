{"version":3,"sources":["components/CharCounter.js","containers/ControlledForm.js","components/Timer.js","containers/TestArea.js","App.js","serviceWorker.js","index.js"],"names":["CharCounter","props","charCount","completed","timer","charPerSecond","_timer","Object","slicedToArray","toFixed","react_default","a","createElement","className","ControlledForm","state","value","handleTextChange","e","_this","setState","target","resetTextArea","_this2","this","_this$props","start","checkMatch","partialMatch","error","reset","onCharCount","style","border","onChange","placeholder","onKeyPress","onKeyUp","onClick","Component","Timer","formattedTimer","filter","number","idx","map","join","TestArea","timerRunning","originText","startTimer","length","ID","setInterval","tick","slice","Math","floor","textEntered","substring","clearInterval","charCountHandler","prevState","handleReset","components_CharCounter","containers_ControlledForm","components_Timer","App","containers_TestArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a3a9ee6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CharCounter = (props) => {\r\n  const {charCount, completed, timer} = props;\r\n  let timeElapsed;\r\n  let charPerSecond = 0;\r\n  if(completed) {\r\n    const [, seconds, hundredths] = timer;\r\n    timeElapsed = +(seconds + (hundredths / 100)).toFixed(2);\r\n    charPerSecond = (charCount / timeElapsed).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <div className='charCounter'>\r\n      {charPerSecond}\r\n      <p>Chars/sec</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CharCounter;\r\n","import React, {Component} from 'react';\r\n\r\nclass ControlledForm extends Component {\r\n\r\n    state = {\r\n        value: ''\r\n    }\r\n\r\nhandleTextChange = (e) => {\r\n    this.setState({\r\n        value: e.target.value\r\n    });\r\n}\r\n\r\nresetTextArea = () => {\r\n    this.setState({\r\n       value: ''\r\n    });\r\n}\r\n\r\n    render() {\r\n      const {start, checkMatch, completed, partialMatch, error, reset, onCharCount} = this.props;\r\n      const style = completed ? {border: '10px solid #34A853'} : partialMatch ? {border: '10px solid #4584EF'} : error ? {border: '10px solid #EA4335'} : null;\r\n\r\n       return(\r\n        <div className='textAreaContainer'>\r\n            <textarea\r\n                style={style}\r\n                value={this.state.value}\r\n                onChange={this.handleTextChange}\r\n                placeholder='The clock start when you start typing.'\r\n                onKeyPress={start}\r\n                onKeyUp={(e) => {\r\n                  checkMatch(e);\r\n                  onCharCount();\r\n                }}\r\n           ></textarea>\r\n           <button onClick={() => {\r\n              this.resetTextArea();\r\n              reset();\r\n            }}>Start Over</button>\r\n        </div>\r\n    );\r\n\r\n    }\r\n}\r\n\r\nexport default ControlledForm;\r\n","import React from 'react';\r\n\r\nfunction Timer(props) {\r\n  //First remove the last element of array representing the ms, then add a leading 0 if number is less than 10, join to string\r\n  const formattedTimer = props.timer.filter((number, idx) => idx !== 3 ).map(number => {\r\n    return number < 10 ? \"0\" + number : number;\r\n  }).join(\":\");\r\n\r\n    return(\r\n        <div className='timerContainer'>\r\n          {formattedTimer}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from 'react';\r\nimport CharCounter from '../components/CharCounter';\r\nimport ControlledForm from './ControlledForm';\r\nimport Timer from '../components/Timer';\r\n\r\nclass TestArea extends Component {\r\n\r\n state = {\r\n   timerRunning: false,\r\n   timer: [0,0,0,0],\r\n   partialMatch: false,\r\n   completed: false,\r\n   charCount: 0,\r\n   error: false,\r\n   originText: 'Seventy seven benevolent elephants.'\r\n }\r\n\r\n  startTimer = (e) => {\r\n    if(e.target.value.length === 0 && this.state.timerRunning === false) { //se non si controlla timerRunning dentro la condizione, si rischia di far partire l'interval ogni qualvolta ritorno a 0 e ricomincio a scrivere\r\n        this.setState({\r\n            timerRunning: true\r\n        });\r\n        this.ID = setInterval(this.tick, 10);\r\n    }\r\n}\r\n\r\ntick = () => {\r\n    const timer = this.state.timer.slice();\r\n    timer[3]++;\r\n    timer[0] = Math.floor((timer[3]/100)/60); //minuti\r\n    timer[1] = Math.floor((timer[3]/100) - (timer[0] * 60)); //secondi\r\n    timer[2] = Math.floor(timer[3] - (timer[1] * 100) - (timer[0] * 6000)); //centesimi\r\n    this.setState({timer});\r\n}\r\n\r\ncheckMatch = (e) => {\r\n    const textEntered = e.target.value;\r\n    if(textEntered !== \"\") { //keyup event triggers before textarea will have a value\r\n        const partialMatch = this.state.originText.substring(0, textEntered.length);\r\n       if(textEntered === this.state.originText) {\r\n           clearInterval(this.ID);\r\n           this.setState({\r\n               completed: true,\r\n               error: false,\r\n               partialMatch: false\r\n           });\r\n       } else {\r\n           if(textEntered === partialMatch) {\r\n               this.setState({\r\n                   completed: false,\r\n                   partialMatch: true,\r\n                   error: false\r\n               });\r\n           } else {\r\n               this.setState({\r\n                   partialMatch: false,\r\n                   error: true,\r\n                   completed: false\r\n               });\r\n           }\r\n       }\r\n    } else {\r\n        this.setState({\r\n            completed: false,\r\n            partialMatch: false,\r\n            error: false\r\n        });\r\n    }\r\n}\r\n\r\ncharCountHandler = () => {\r\n  if(this.state.partialMatch || this.state.completed) {\r\n    this.setState(prevState => ({\r\n      charCount: prevState.charCount + 1\r\n    }));\r\n  }\r\n}\r\n\r\nhandleReset = () => {\r\n    clearInterval(this.ID);\r\n    let timer = this.state.timer.slice();\r\n    timer = [0,0,0,0];\r\n    this.setState({\r\n        timerRunning: false,\r\n        timer,\r\n        completed: false,\r\n        partialMatch: false,\r\n        error: false,\r\n        charCount: 0\r\n    });\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div className='mainContent'>\r\n          <section className='textToMatch'>\r\n              <p>{this.state.originText}</p>\r\n          </section>\r\n          <CharCounter\r\n            completed={this.state.completed}\r\n            charCount={this.state.charCount}\r\n            timer={this.state.timer}/>\r\n          <ControlledForm\r\n             start={this.startTimer}\r\n             checkMatch={this.checkMatch}\r\n             completed={this.state.completed}\r\n             partialMatch={this.state.partialMatch}\r\n             error={this.state.error}\r\n             reset={this.handleReset}\r\n             onCharCount={this.charCountHandler}/>\r\n          <Timer timer={this.state.timer}/>\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default TestArea;\r\n","import React, { Component } from 'react';\nimport TestArea from './containers/TestArea'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n           <h1>Test Your Typing Speed</h1>\n        </header>\n        <TestArea />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}